#pylint: disable=missing-docstring
####################################################################################################
#                                    DO NOT MODIFY THIS HEADER                                     #
#                   MOOSE - Multiphysics Object Oriented Simulation Environment                    #
#                                                                                                  #
#                              (c) 2010 Battelle Energy Alliance, LLC                              #
#                                       ALL RIGHTS RESERVED                                        #
#                                                                                                  #
#                            Prepared by Battelle Energy Alliance, LLC                             #
#                               Under Contract No. DE-AC07-05ID14517                               #
#                               With the U. S. Department of Energy                                #
#                                                                                                  #
#                               See COPYRIGHT for full restrictions                                #
####################################################################################################
#pylint: enable=missing-docstring
import os
import logging

import MooseDocs
import elements

LOG = logging.getLogger(__name__)

def get_language(tag):
    """
    Helper function for extracting code highlight language from tag attributes.
    """
    # Map from lower case hljs name to latex listings name
    languages = {'c++':'C++', 'python':'Python'}
    for html, latex in languages.iteritems():
        lang = 'language-{}'.format(html)
        if lang in tag.get('class', ''):
            return latex

class MooseTable(elements.Table):
    """
    Builds table fitted to the width of the document.
    """
    def __init__(self, **kwargs):
        kwargs.setdefault('command', 'tabularx')
        super(MooseTable, self).__init__(**kwargs)
    def convert(self, tag):
        super(MooseTable, self).convert(tag)
        cols = tag.contents[0]
        frmt = ['l']*self.numColumns(tag)
        frmt[-1] = 'X'
        cols.string = ''.join(frmt)
        width = self.new()
        width['data-latex-begin'] = '{\\linewidth'
        width['data-latex-end'] = '}'
        cols.insert_before(width)

class Admonition(elements.Command):
    """
    Create an admonition in latex, assumes that the \admonition command is defined
    in the latex preamble.
    """
    def __init__(self, **kwargs):
        super(Admonition, self).__init__(name='div',
                                         command='admonition',
                                         attrs={'class':'admonition'})

    def convert(self, tag):
        super(Admonition, self).convert(tag)
        atype = tag.attrs['class'][tag.attrs['class'].index('admonition')+1]
        title = tag.find(class_='admonition-title')
        if title:
            title.replace_with(self.curly(string=title.string))
        else:
            tag.insert(0, self.curly())
        tag.p.replace_with(self.curly(string=tag.p.string))

        tag.insert(0, self.square(string='{}-title'.format(atype)))
        tag.insert(1, self.square(string=atype))
        tag['data-latex-close'] = '\n'

class MoosePreCode(elements.PreCode):
    """
    Uses listing package rather than verbatim for code.
    """
    def __init__(self, **kwargs):
        kwargs.setdefault('command', 'lstlisting')
        super(MoosePreCode, self).__init__(**kwargs)
    def convert(self, tag):
        super(MoosePreCode, self).convert(tag)
        lang = get_language(tag)
        if lang:
            sq = self.square()
            sq.append(self.new(string='language='))
            sq.append(self.new(string=lang))
            sq.attrs['data-latex-end-suffix'] = '\n'
            tag.attrs['data-latex-begin-suffix'] = ''
            tag.wrap(self.new())
            tag.insert(0, sq)

class MooseCodeDiv(MoosePreCode):
    """
    Create a listing block for code blocks generated by MooseMarkdownExtension.
    """
    def __init__(self, **kwargs):
        kwargs.setdefault('name', 'div')
        kwargs.setdefault('attrs', {'class':'moosedocs-code-div'})
        super(MooseCodeDiv, self).__init__(**kwargs)

    def convert(self, tag):
        caption = tag.contents[0].extract()
        pre = tag.pre
        super(MooseCodeDiv, self).convert(pre)

        sq = pre.find('latex', attrs={'data-latex-end-suffix':'\n'})
        if not sq:
            sq = self.square()
            pre.insert(0, sq)
            sq.attrs['data-latex-end-suffix'] = '\n'
            pre.attrs['data-latex-begin-suffix'] = ''
        else:
            sq.append(self.new(string=', '))

        sq.append(self.new(string='caption='))
        sq.append(caption)

class MooseFigure(elements.Figure):
    """
    Convert moose figure block.
    """
    def __init__(self, **kwargs):
        kwargs.setdefault('name', 'div')
        kwargs.setdefault('end_prefix', '')
        super(MooseFigure, self).__init__(**kwargs)
    def test(self, tag):
        return super(MooseFigure, self).test(tag) and tag.find(class_='card') \
                                                  and tag.find(class_='card-image') \
                                                  and tag.find('img')

class MooseImage(elements.Image):
    """
    Handles images and figures created with MOOSE markdown.
    """
    def __init__(self, **kwargs):
        kwargs.setdefault('begin_suffix', '[width=\\linewidth]')
        super(MooseImage, self).__init__(**kwargs)
    def convert(self, tag):
        """
        Builds up the content of the latex figure block.
        """
        super(MooseImage, self).convert(tag)
        path = tag['src']
        if not os.path.exists(path):
            root_path = os.path.join(MooseDocs.ROOT_DIR, path)
            if os.path.exists(root_path):
                tag['src'] = root_path

class MooseCite(elements.Element):
    """
    Convert the cite command from MooseBibtex to the proper latex cite command.
    """
    def __init__(self, **kwargs):
        kwargs.setdefault('name', 'span')
        kwargs.setdefault('attrs', {'data-moose-cite': ''})
        super(MooseCite, self).__init__(**kwargs)
    def convert(self, tag):
        tag['data-latex-content'] = tag['data-moose-cite']
        super(MooseCite, self).convert(tag)
