[Tests]
  [./simple]
    type = AnalyzeJacobian
    input = simple.i
    expect_out = "\(0,0\) On-diagonal Jacobian is slightly off \(by 0.500132 %\).*\(1,1\) On-diagonal Jacobian is wrong \(off by 100.0 %\).*\(2,2\) On-diagonal Jacobian needs to be implemented.*\(3,3\) On-diagonal Jacobian should just return  zero"
    recover = false
  [../]

  [./med]
    type = AnalyzeJacobian
    input = med.i
    expect_out = "\(0,0\) On-diagonal Jacobian is questionable \(off by 10.00 %\).*\(1,1\) On-diagonal Jacobian is wrong \(off by 30.0 %\)"
    recover = false
  [../]

  # this test only has a wrong off-diagonal Jacobian, but we switch of testing
  # the off diagonal. The test of the on-diagonal only should therefore throw no errors.
  [./offdiag]
    type = AnalyzeJacobian
    input = offdiag.i
    off_diagonal = false
    expect_out = "No errors detected. :-\)"
    recover = false
  [../]

  [./no_negative_jacobian]
    type = RunApp
    input = no_negative_jacobian.i
  [../]
  [./jacobian_zero]
    type = RunException
    input = no_negative_jacobian.i
    prereq = no_negative_jacobian
    cli_args = 'Kernels/diff/use_displaced_mesh=true'
    expect_err = 'ERROR: negative Jacobian 0 at point \(x,y,z\)=\(       0, 0.211325, 0.211325\) in element 0'
  [../]
  [./jacobian_negative]
    type = RunException
    input = no_negative_jacobian.i
    prereq = no_negative_jacobian
    cli_args = 'Kernels/diff/use_displaced_mesh=true Executioner/dt=0.8'
    expect_err = 'ERROR: negative Jacobian -0.0625 at point \(x,y,z\)=\(-0.105662, 0.211325, 0.211325\) in element 0'
  [../]
[]
